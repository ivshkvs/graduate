---
name: CI/CD (Flake8, Pylint, Artifact, Dockerhub)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
env:
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  
jobs:
  Test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with Flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  Lint:
    runs-on: ubuntu-latest
    needs: Test
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint
    - name: Lint code with Pylint
      run: |
        pylint $(git ls-files '*.py')

  Build:
    runs-on: ubuntu-latest
    needs: Lint
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: pip install -r ./chatbot/requirements.txt
    - name: Build
      run: python ./chatbot/setup.py build  
    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build_app
        path: ./chatbot/  
  
  Dockerhub:
    runs-on: ubuntu-latest
    needs: Build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./docker
        push: false
        tags: ${{ secrets.IMAGE_NAME }}:latest 
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Push Docker image to DockerHub
      uses: docker/build-push-action@v4
      with:
        context: ./docker
        push: true
        tags: ${{ secrets.IMAGE_NAME }}:latest
        
  Discord: 
    runs-on: ubuntu-latest
    needs: Dockerhub
    steps:
    - name: Send Discord notification
      env:
       DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
       curl -H "Content-Type: application/json" -X POST -d '{"content":"CI/CD COMPLETE"}' $DISCORD_WEBHOOK_URL 
  
  CloudFormation:
    runs-on: ubuntu-latest
    needs: Discord
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1
    - name: Deploy Stack
      run: |
          aws cloudformation deploy \
          --stack-name TELEGRAM-BOT \
          --template-file ./cloudformation/template.yaml \
          --capabilities CAPABILITY_IAM
---
